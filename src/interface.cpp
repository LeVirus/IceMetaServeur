// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <interface.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __biblAudio__ServeurIce__afficherMorceaux_name = "afficherMorceaux";

const ::std::string __biblAudio__ServeurIce__bRechercherMorceau_name = "bRechercherMorceau";

const ::std::string __biblAudio__ServeurIce__bAjoutMorceau_name = "bAjoutMorceau";

const ::std::string __biblAudio__ServeurIce__bSuprMorceau_name = "bSuprMorceau";

const ::std::string __biblAudio__ServeurIce__getMorceauxArt_name = "getMorceauxArt";

const ::std::string __biblAudio__ServeurIce__getMorceauxMorc_name = "getMorceauxMorc";

const ::std::string __biblAudio__ServeurIce__stopSound_name = "stopSound";

const ::std::string __biblAudio__ServeurIce__readSoundFic_name = "readSoundFic";

const ::std::string __biblAudio__ServeurIce__readSound_name = "readSound";

const ::std::string __biblAudio__Monitor__report_name = "report";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::biblAudio::upCast(::IceProxy::biblAudio::ServeurIce* p) { return p; }

void
::IceProxy::biblAudio::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::biblAudio::ServeurIce>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::biblAudio::ServeurIce;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::biblAudio::ServeurIce::afficherMorceaux(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__afficherMorceaux_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_afficherMorceaux(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__afficherMorceaux_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__afficherMorceaux_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::biblAudio::ServeurIce::end_afficherMorceaux(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __biblAudio__ServeurIce__afficherMorceaux_name);
}

::biblAudio::Morceau
IceProxy::biblAudio::ServeurIce::bRechercherMorceau(const ::std::string& __p_sNomMusique, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__biblAudio__ServeurIce__bRechercherMorceau_name);
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__bRechercherMorceau_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMusique);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::biblAudio::Morceau __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_bRechercherMorceau(const ::std::string& __p_sNomMusique, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__bRechercherMorceau_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__bRechercherMorceau_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__bRechercherMorceau_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMusique);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::__begin_bRechercherMorceau(const ::std::string& __p_sNomMusique, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::biblAudio::Morceau&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::biblAudio::Morceau&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::biblAudio::ServeurIcePrx __proxy = ::biblAudio::ServeurIcePrx::uncheckedCast(__result->getProxy());
            ::biblAudio::Morceau __ret;
            try
            {
                __ret = __proxy->end_bRechercherMorceau(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::biblAudio::Morceau&)> _response;
    };
    return begin_bRechercherMorceau(__p_sNomMusique, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::biblAudio::Morceau
IceProxy::biblAudio::ServeurIce::end_bRechercherMorceau(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__bRechercherMorceau_name);
    ::biblAudio::Morceau __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::biblAudio::ServeurIce::bAjoutMorceau(const ::std::string& __p_sNomArt, const ::std::string& __p_sNomMorc, const ::std::string& __p_sFic, ::Ice::Int __p_uiDureeMorc, ::Ice::Int __p_uiDateSortie, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__biblAudio__ServeurIce__bAjoutMorceau_name);
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__bAjoutMorceau_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomArt);
        __os->write(__p_sNomMorc);
        __os->write(__p_sFic);
        __os->write(__p_uiDureeMorc);
        __os->write(__p_uiDateSortie);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_bAjoutMorceau(const ::std::string& __p_sNomArt, const ::std::string& __p_sNomMorc, const ::std::string& __p_sFic, ::Ice::Int __p_uiDureeMorc, ::Ice::Int __p_uiDateSortie, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__bAjoutMorceau_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__bAjoutMorceau_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__bAjoutMorceau_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomArt);
        __os->write(__p_sNomMorc);
        __os->write(__p_sFic);
        __os->write(__p_uiDureeMorc);
        __os->write(__p_uiDateSortie);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::__begin_bAjoutMorceau(const ::std::string& __p_sNomArt, const ::std::string& __p_sNomMorc, const ::std::string& __p_sFic, ::Ice::Int __p_uiDureeMorc, ::Ice::Int __p_uiDateSortie, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::biblAudio::ServeurIcePrx __proxy = ::biblAudio::ServeurIcePrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_bAjoutMorceau(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_bAjoutMorceau(__p_sNomArt, __p_sNomMorc, __p_sFic, __p_uiDureeMorc, __p_uiDateSortie, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::biblAudio::ServeurIce::end_bAjoutMorceau(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__bAjoutMorceau_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::biblAudio::ServeurIce::bSuprMorceau(const ::std::string& __p_sNomMorc, const ::std::string& __p_sNomArt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__biblAudio__ServeurIce__bSuprMorceau_name);
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__bSuprMorceau_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMorc);
        __os->write(__p_sNomArt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_bSuprMorceau(const ::std::string& __p_sNomMorc, const ::std::string& __p_sNomArt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__bSuprMorceau_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__bSuprMorceau_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__bSuprMorceau_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMorc);
        __os->write(__p_sNomArt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::__begin_bSuprMorceau(const ::std::string& __p_sNomMorc, const ::std::string& __p_sNomArt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::biblAudio::ServeurIcePrx __proxy = ::biblAudio::ServeurIcePrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_bSuprMorceau(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_bSuprMorceau(__p_sNomMorc, __p_sNomArt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::biblAudio::ServeurIce::end_bSuprMorceau(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__bSuprMorceau_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::biblAudio::mvectRecherche
IceProxy::biblAudio::ServeurIce::getMorceauxArt(const ::std::string& __p_sNomArt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__biblAudio__ServeurIce__getMorceauxArt_name);
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__getMorceauxArt_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomArt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::biblAudio::mvectRecherche __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_getMorceauxArt(const ::std::string& __p_sNomArt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__getMorceauxArt_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__getMorceauxArt_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__getMorceauxArt_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomArt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::__begin_getMorceauxArt(const ::std::string& __p_sNomArt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::biblAudio::mvectRecherche&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::biblAudio::mvectRecherche&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::biblAudio::ServeurIcePrx __proxy = ::biblAudio::ServeurIcePrx::uncheckedCast(__result->getProxy());
            ::biblAudio::mvectRecherche __ret;
            try
            {
                __ret = __proxy->end_getMorceauxArt(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::biblAudio::mvectRecherche&)> _response;
    };
    return begin_getMorceauxArt(__p_sNomArt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::biblAudio::mvectRecherche
IceProxy::biblAudio::ServeurIce::end_getMorceauxArt(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__getMorceauxArt_name);
    ::biblAudio::mvectRecherche __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::biblAudio::mvectRecherche
IceProxy::biblAudio::ServeurIce::getMorceauxMorc(const ::std::string& __p_sNomMorc, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__biblAudio__ServeurIce__getMorceauxMorc_name);
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__getMorceauxMorc_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMorc);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::biblAudio::mvectRecherche __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_getMorceauxMorc(const ::std::string& __p_sNomMorc, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__biblAudio__ServeurIce__getMorceauxMorc_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__getMorceauxMorc_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__getMorceauxMorc_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMorc);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::__begin_getMorceauxMorc(const ::std::string& __p_sNomMorc, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::biblAudio::mvectRecherche&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::biblAudio::mvectRecherche&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::biblAudio::ServeurIcePrx __proxy = ::biblAudio::ServeurIcePrx::uncheckedCast(__result->getProxy());
            ::biblAudio::mvectRecherche __ret;
            try
            {
                __ret = __proxy->end_getMorceauxMorc(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::biblAudio::mvectRecherche&)> _response;
    };
    return begin_getMorceauxMorc(__p_sNomMorc, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::biblAudio::mvectRecherche
IceProxy::biblAudio::ServeurIce::end_getMorceauxMorc(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __biblAudio__ServeurIce__getMorceauxMorc_name);
    ::biblAudio::mvectRecherche __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::biblAudio::ServeurIce::stopSound(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__stopSound_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_stopSound(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__stopSound_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__stopSound_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::biblAudio::ServeurIce::end_stopSound(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __biblAudio__ServeurIce__stopSound_name);
}

void
IceProxy::biblAudio::ServeurIce::readSoundFic(const ::std::string& __p_pathToFic, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__readSoundFic_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pathToFic);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_readSoundFic(const ::std::string& __p_pathToFic, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__readSoundFic_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__readSoundFic_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pathToFic);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::biblAudio::ServeurIce::end_readSoundFic(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __biblAudio__ServeurIce__readSoundFic_name);
}

void
IceProxy::biblAudio::ServeurIce::readSound(const ::std::string& __p_sNomMorceau, const ::std::string& __p_sNomArtiste, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __biblAudio__ServeurIce__readSound_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMorceau);
        __os->write(__p_sNomArtiste);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::ServeurIce::begin_readSound(const ::std::string& __p_sNomMorceau, const ::std::string& __p_sNomArtiste, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__ServeurIce__readSound_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__ServeurIce__readSound_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sNomMorceau);
        __os->write(__p_sNomArtiste);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::biblAudio::ServeurIce::end_readSound(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __biblAudio__ServeurIce__readSound_name);
}

const ::std::string&
IceProxy::biblAudio::ServeurIce::ice_staticId()
{
    return ::biblAudio::ServeurIce::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::biblAudio::ServeurIce::__newInstance() const
{
    return new ServeurIce;
}
::IceProxy::Ice::Object* ::IceProxy::biblAudio::upCast(::IceProxy::biblAudio::Monitor* p) { return p; }

void
::IceProxy::biblAudio::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::biblAudio::Monitor>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::biblAudio::Monitor;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::biblAudio::Monitor::report(const ::std::string& __p_action, const ::biblAudio::Morceau& __p_morceau, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __biblAudio__Monitor__report_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_action);
        __os->write(__p_morceau);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::biblAudio::Monitor::begin_report(const ::std::string& __p_action, const ::biblAudio::Morceau& __p_morceau, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __biblAudio__Monitor__report_name, __del, __cookie);
    try
    {
        __result->prepare(__biblAudio__Monitor__report_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_action);
        __os->write(__p_morceau);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::biblAudio::Monitor::end_report(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __biblAudio__Monitor__report_name);
}

const ::std::string&
IceProxy::biblAudio::Monitor::ice_staticId()
{
    return ::biblAudio::Monitor::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::biblAudio::Monitor::__newInstance() const
{
    return new Monitor;
}

::Ice::Object* biblAudio::upCast(::biblAudio::ServeurIce* p) { return p; }

namespace
{
const ::std::string __biblAudio__ServeurIce_ids[2] =
{
    "::Ice::Object",
    "::biblAudio::ServeurIce"
};

}

bool
biblAudio::ServeurIce::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__biblAudio__ServeurIce_ids, __biblAudio__ServeurIce_ids + 2, _s);
}

::std::vector< ::std::string>
biblAudio::ServeurIce::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__biblAudio__ServeurIce_ids[0], &__biblAudio__ServeurIce_ids[2]);
}

const ::std::string&
biblAudio::ServeurIce::ice_id(const ::Ice::Current&) const
{
    return __biblAudio__ServeurIce_ids[1];
}

const ::std::string&
biblAudio::ServeurIce::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::biblAudio::ServeurIce";
    return typeId;
#else
    return __biblAudio__ServeurIce_ids[1];
#endif
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___afficherMorceaux(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    afficherMorceaux(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___bRechercherMorceau(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sNomMusique;
    __is->read(__p_sNomMusique);
    __inS.endReadParams();
    ::biblAudio::Morceau __ret = bRechercherMorceau(__p_sNomMusique, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___bAjoutMorceau(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sNomArt;
    ::std::string __p_sNomMorc;
    ::std::string __p_sFic;
    ::Ice::Int __p_uiDureeMorc;
    ::Ice::Int __p_uiDateSortie;
    __is->read(__p_sNomArt);
    __is->read(__p_sNomMorc);
    __is->read(__p_sFic);
    __is->read(__p_uiDureeMorc);
    __is->read(__p_uiDateSortie);
    __inS.endReadParams();
    bool __ret = bAjoutMorceau(__p_sNomArt, __p_sNomMorc, __p_sFic, __p_uiDureeMorc, __p_uiDateSortie, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___bSuprMorceau(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sNomMorc;
    ::std::string __p_sNomArt;
    __is->read(__p_sNomMorc);
    __is->read(__p_sNomArt);
    __inS.endReadParams();
    bool __ret = bSuprMorceau(__p_sNomMorc, __p_sNomArt, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___getMorceauxArt(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sNomArt;
    __is->read(__p_sNomArt);
    __inS.endReadParams();
    ::biblAudio::mvectRecherche __ret = getMorceauxArt(__p_sNomArt, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___getMorceauxMorc(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sNomMorc;
    __is->read(__p_sNomMorc);
    __inS.endReadParams();
    ::biblAudio::mvectRecherche __ret = getMorceauxMorc(__p_sNomMorc, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___stopSound(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    stopSound(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___readSoundFic(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_pathToFic;
    __is->read(__p_pathToFic);
    __inS.endReadParams();
    readSoundFic(__p_pathToFic, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
biblAudio::ServeurIce::___readSound(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sNomMorceau;
    ::std::string __p_sNomArtiste;
    __is->read(__p_sNomMorceau);
    __is->read(__p_sNomArtiste);
    __inS.endReadParams();
    readSound(__p_sNomMorceau, __p_sNomArtiste, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __biblAudio__ServeurIce_all[] =
{
    "afficherMorceaux",
    "bAjoutMorceau",
    "bRechercherMorceau",
    "bSuprMorceau",
    "getMorceauxArt",
    "getMorceauxMorc",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "readSound",
    "readSoundFic",
    "stopSound"
};

}

::Ice::DispatchStatus
biblAudio::ServeurIce::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__biblAudio__ServeurIce_all, __biblAudio__ServeurIce_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __biblAudio__ServeurIce_all)
    {
        case 0:
        {
            return ___afficherMorceaux(in, current);
        }
        case 1:
        {
            return ___bAjoutMorceau(in, current);
        }
        case 2:
        {
            return ___bRechercherMorceau(in, current);
        }
        case 3:
        {
            return ___bSuprMorceau(in, current);
        }
        case 4:
        {
            return ___getMorceauxArt(in, current);
        }
        case 5:
        {
            return ___getMorceauxMorc(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___readSound(in, current);
        }
        case 11:
        {
            return ___readSoundFic(in, current);
        }
        case 12:
        {
            return ___stopSound(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
biblAudio::ServeurIce::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
biblAudio::ServeurIce::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
biblAudio::__patch(ServeurIcePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::biblAudio::ServeurIcePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::biblAudio::ServeurIce::ice_staticId(), v);
    }
}

::Ice::Object* biblAudio::upCast(::biblAudio::Monitor* p) { return p; }

namespace
{
const ::std::string __biblAudio__Monitor_ids[2] =
{
    "::Ice::Object",
    "::biblAudio::Monitor"
};

}

bool
biblAudio::Monitor::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__biblAudio__Monitor_ids, __biblAudio__Monitor_ids + 2, _s);
}

::std::vector< ::std::string>
biblAudio::Monitor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__biblAudio__Monitor_ids[0], &__biblAudio__Monitor_ids[2]);
}

const ::std::string&
biblAudio::Monitor::ice_id(const ::Ice::Current&) const
{
    return __biblAudio__Monitor_ids[1];
}

const ::std::string&
biblAudio::Monitor::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::biblAudio::Monitor";
    return typeId;
#else
    return __biblAudio__Monitor_ids[1];
#endif
}

::Ice::DispatchStatus
biblAudio::Monitor::___report(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_action;
    ::biblAudio::Morceau __p_morceau;
    __is->read(__p_action);
    __is->read(__p_morceau);
    __inS.endReadParams();
    report(__p_action, __p_morceau, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __biblAudio__Monitor_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "report"
};

}

::Ice::DispatchStatus
biblAudio::Monitor::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__biblAudio__Monitor_all, __biblAudio__Monitor_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __biblAudio__Monitor_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___report(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
biblAudio::Monitor::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
biblAudio::Monitor::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
biblAudio::__patch(MonitorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::biblAudio::MonitorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::biblAudio::Monitor::ice_staticId(), v);
    }
}
